1. Para que serve o git?

 - O git nada mais é do que um controle de versão.
 - Ele parmite que seja mantido uma cópia do projeto online que irá receber as atualizações dos repostórios remotos, permitindo que as modificações no projeto sejam compartilhadas com diversos membros de uma equipe.

 2. Istalação

 - Caso a máquina não tenho o git instalado, deverá ser executado o procedimento de instalação do mesmo através do site que pode ser facilmente encontrado em qualquer motor de pesquisa.

 - Uma vez o git instalado, é preciso informar quem é o usuário, pois será essencial para apontar quem está realizando os commits.

 - No prompt ou no git bash deverão ser inseridos os seguintes comandos:

git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"

ou caso queira setar as informaçoes para todos os projetos de uma maquina...

git config --global user.name "Seu nome aqui"
git config --global user.email "seu@email.aqui"


 3. Repositórios

 - Para que seja trabalhado com o controle de versionamento, o ideal é que o usuário tenha um repositório local na sua maquina, para que possa trabalhar livremente com os arquivos desejados.
 - Para inicializar um repositório local, o usuário irá escolher o local(pasta) que será utilizada para receber os arquivos que serão versionados e nela, através do promt de comando ou através do git bash, irá utiliar o comando "git init" e assim será exibida uma mensagem informando que o repositório local foi inicializado.
 - Por padrão o git irá criar um repositório com uma branch denominada master, mas caso o usuário queira alterar o nome o nome da branch, basta utilizar o comando "git branch -m numeBranchAtual nomeBranchNova".

 4. Salvando alterações

  - Uma vez que seja editados arquivos que encontram-se dentro da pasta contentora do repositório, é preciso que o git passe a trackea-los a fim de que as modificações passem a ser de conhecimento do git e assim possa realizar os commit.

  - Para trackear os arquivos, o comando necessário é o "git add nomeDoArquivo" para selecionar apenas um arquivo, "git add nomeAqruivoUM nomeArquivoDois" para adicionar mais de um arquivo e "git add ." para adicionar todos os arquivos na pasta.

  - Para maiores informações sobre os status no git, é sugerida a leitura do seguinte texto:

  https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Altera%C3%A7%C3%B5es-em-Seu-Reposit%C3%B3rio

  5. Vendo histórico

  -  Para visualizar o histórico de commits existentes em seu código, basta utilizar o comando "git log" e serão exibidas informações de commits.

  - Para o log trazer menos informações "git log --oneline"

  - Com o comando "git log -p" é possível ver as informações dos commits de forma mais detalhada.

  - Para mais exemplos simples de histórico, recomendo a leitura do seguinte texto:

  https://devhints.io/git-log

  6. Ignorando arquivos

  - Para evitar que o git monitore arquivos indesejáveis, é possível criar um arquivo chamado ".gitignore" e nele irá conter o nome de todos os arquivos que o git não deve monitorar, como por exemplo, arquivos de configuração da IDE.

  7. Repositório Remoto

  - para a criação de um repositório na máquina que será utilizado como servidor, é preciso inicializar o repositório com o comando  "git init --bare", com esse comando será inicializado um repositório que, em tese, não será possível realizar alterações com facilidade.

  - Com o servidor criado, é necessário que o nosso repositório tenha acesso ao servidor para que ele possa compartilhar as informações contidas nele ou mesmo trazer as informações contidas no servidor, e para isso utilizamos o comando "git remote add nomeServidor caminho/do/servidor". Lembrando que o caminho do servidor pode ser um pathway, uma url ou qualquer caminho que possa ser conhecido pelo computador.

  - Caso o usuário, sem repositório criado, queira tão somente clonar o servidor para que possa trabalhar a partir do estado que ele se econtra, basta utilizar o comando "git clone cominho/do/servidor".

  8. Sincronizando Dados

  - Para enviar os dados que foram commitados para o servidor que foi devidamente setado, deverá ser realizado o comando "git push", mas para que o git entenda para onde está sendo enviado, é preciso utilizar, inicialmente, o comando "git push nomeRepositorioServidor nomeBranch".

  - Caso seja necessário trazer informações do servidor para o repositório local, o comando a ser utilizado é o "git pull".

  




  